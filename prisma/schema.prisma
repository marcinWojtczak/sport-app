// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String         @id @default(cuid())
  name             String?        @unique
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  password         String?
  gender           String?
  posts            Post[]
  comments         Comment[]
  age              String?
  createdEvent      Event[]
  media            Media[]
 
}

model Event {
  id              String         @id @default(cuid())
  name            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  posts           Post[]
  Creator         User?          @relation(fields: [creatorId], references: [id])
  creatorId       String
}

model Post {
  id              String      @id @default(cuid())
  title           String
  content         Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  author          User        @relation(fields: [authorId], references: [id])
  authorId        String
  comments        Comment[]
  event           Event @relation(fields: [eventId], references: [id])
  eventId         String
  media           Media?    @relation(fields: [mediaId], references: [id])
  mediaId         String?    @unique
}

 
model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String   
}

model Media {
  id          String      @id @default(cuid())
  url         String
  size        Float
  type        String
  post        Post?      
  user        User      @relation(fields:[userId], references: [id])
  userId      String    
}
